/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.nlu.doanhnghiep.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.nlu.doanhnghiep.model.KhuVuc;
import com.nlu.doanhnghiep.model.KhuVucModel;
import com.nlu.doanhnghiep.model.KhuVucSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the KhuVuc service. Represents a row in the &quot;nlu_KhuVuc&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.nlu.doanhnghiep.model.KhuVucModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link KhuVucImpl}.
 * </p>
 *
 * @author Anh ba khia
 * @see KhuVucImpl
 * @see com.nlu.doanhnghiep.model.KhuVuc
 * @see com.nlu.doanhnghiep.model.KhuVucModel
 * @generated
 */
@JSON(strict = true)
public class KhuVucModelImpl extends BaseModelImpl<KhuVuc>
	implements KhuVucModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a khu vuc model instance should use the {@link com.nlu.doanhnghiep.model.KhuVuc} interface instead.
	 */
	public static final String TABLE_NAME = "nlu_KhuVuc";
	public static final Object[][] TABLE_COLUMNS = {
			{ "kvid", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "ngayAdd", Types.TIMESTAMP },
			{ "tenKv", Types.VARCHAR },
			{ "diaChi", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table nlu_KhuVuc (kvid LONG not null primary key,userId LONG,ngayAdd DATE null,tenKv VARCHAR(75) null,diaChi VARCHAR(75) null)";
	public static final String TABLE_SQL_DROP = "drop table nlu_KhuVuc";
	public static final String ORDER_BY_JPQL = " ORDER BY khuVuc.kvid ASC";
	public static final String ORDER_BY_SQL = " ORDER BY nlu_KhuVuc.kvid ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.nlu.doanhnghiep.model.KhuVuc"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.nlu.doanhnghiep.model.KhuVuc"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static KhuVuc toModel(KhuVucSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		KhuVuc model = new KhuVucImpl();

		model.setKvid(soapModel.getKvid());
		model.setUserId(soapModel.getUserId());
		model.setNgayAdd(soapModel.getNgayAdd());
		model.setTenKv(soapModel.getTenKv());
		model.setDiaChi(soapModel.getDiaChi());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<KhuVuc> toModels(KhuVucSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<KhuVuc> models = new ArrayList<KhuVuc>(soapModels.length);

		for (KhuVucSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.nlu.doanhnghiep.model.KhuVuc"));

	public KhuVucModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _kvid;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setKvid(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _kvid;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return KhuVuc.class;
	}

	@Override
	public String getModelClassName() {
		return KhuVuc.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("kvid", getKvid());
		attributes.put("userId", getUserId());
		attributes.put("ngayAdd", getNgayAdd());
		attributes.put("tenKv", getTenKv());
		attributes.put("diaChi", getDiaChi());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long kvid = (Long)attributes.get("kvid");

		if (kvid != null) {
			setKvid(kvid);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		Date ngayAdd = (Date)attributes.get("ngayAdd");

		if (ngayAdd != null) {
			setNgayAdd(ngayAdd);
		}

		String tenKv = (String)attributes.get("tenKv");

		if (tenKv != null) {
			setTenKv(tenKv);
		}

		String diaChi = (String)attributes.get("diaChi");

		if (diaChi != null) {
			setDiaChi(diaChi);
		}
	}

	@JSON
	@Override
	public long getKvid() {
		return _kvid;
	}

	@Override
	public void setKvid(long kvid) {
		_kvid = kvid;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public Date getNgayAdd() {
		return _ngayAdd;
	}

	@Override
	public void setNgayAdd(Date ngayAdd) {
		_ngayAdd = ngayAdd;
	}

	@JSON
	@Override
	public String getTenKv() {
		if (_tenKv == null) {
			return StringPool.BLANK;
		}
		else {
			return _tenKv;
		}
	}

	@Override
	public void setTenKv(String tenKv) {
		_tenKv = tenKv;
	}

	@JSON
	@Override
	public String getDiaChi() {
		if (_diaChi == null) {
			return StringPool.BLANK;
		}
		else {
			return _diaChi;
		}
	}

	@Override
	public void setDiaChi(String diaChi) {
		_diaChi = diaChi;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			KhuVuc.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public KhuVuc toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (KhuVuc)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		KhuVucImpl khuVucImpl = new KhuVucImpl();

		khuVucImpl.setKvid(getKvid());
		khuVucImpl.setUserId(getUserId());
		khuVucImpl.setNgayAdd(getNgayAdd());
		khuVucImpl.setTenKv(getTenKv());
		khuVucImpl.setDiaChi(getDiaChi());

		khuVucImpl.resetOriginalValues();

		return khuVucImpl;
	}

	@Override
	public int compareTo(KhuVuc khuVuc) {
		long primaryKey = khuVuc.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof KhuVuc)) {
			return false;
		}

		KhuVuc khuVuc = (KhuVuc)obj;

		long primaryKey = khuVuc.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<KhuVuc> toCacheModel() {
		KhuVucCacheModel khuVucCacheModel = new KhuVucCacheModel();

		khuVucCacheModel.kvid = getKvid();

		khuVucCacheModel.userId = getUserId();

		Date ngayAdd = getNgayAdd();

		if (ngayAdd != null) {
			khuVucCacheModel.ngayAdd = ngayAdd.getTime();
		}
		else {
			khuVucCacheModel.ngayAdd = Long.MIN_VALUE;
		}

		khuVucCacheModel.tenKv = getTenKv();

		String tenKv = khuVucCacheModel.tenKv;

		if ((tenKv != null) && (tenKv.length() == 0)) {
			khuVucCacheModel.tenKv = null;
		}

		khuVucCacheModel.diaChi = getDiaChi();

		String diaChi = khuVucCacheModel.diaChi;

		if ((diaChi != null) && (diaChi.length() == 0)) {
			khuVucCacheModel.diaChi = null;
		}

		return khuVucCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{kvid=");
		sb.append(getKvid());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", ngayAdd=");
		sb.append(getNgayAdd());
		sb.append(", tenKv=");
		sb.append(getTenKv());
		sb.append(", diaChi=");
		sb.append(getDiaChi());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.nlu.doanhnghiep.model.KhuVuc");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>kvid</column-name><column-value><![CDATA[");
		sb.append(getKvid());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ngayAdd</column-name><column-value><![CDATA[");
		sb.append(getNgayAdd());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>tenKv</column-name><column-value><![CDATA[");
		sb.append(getTenKv());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>diaChi</column-name><column-value><![CDATA[");
		sb.append(getDiaChi());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = KhuVuc.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { KhuVuc.class };
	private long _kvid;
	private long _userId;
	private String _userUuid;
	private Date _ngayAdd;
	private String _tenKv;
	private String _diaChi;
	private KhuVuc _escapedModel;
}